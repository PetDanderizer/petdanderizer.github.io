@keyframes jiggleX {
    from {left: 0px;}
    to {left: 100px;}
}

.question_title {
    border-top: 1px solid black;
    margin-bottom:0px;
}

.jiggle > * {
    position: relative;
    animation-name: jiggleX;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-duration: 1.4s;
}


.jiggle :nth-child(7n) {
    animation-delay: -0s;
}

.jiggle :nth-child(7n+1) {
    animation-delay: -0.4s;
}

.jiggle :nth-child(7n+2) {
    animation-delay: -0.8s;
}

.jiggle :nth-child(7n+3) {
    animation-delay: -1.2s;
}

.jiggle :nth-child(7n+4) {
    animation-delay: -1.6s;
}

.jiggle :nth-child(7n+5) {
    animation-delay: -2s;
}

.jiggle :nth-child(7n+6) {
    animation-delay: -2.4s;
}

.incorrect {
    color:red;
    display:none;
    margin:0px;
    z-index:0;
}
/*
 * if user has submitted the quiz, show "incorrect" on all answers by default
 */
form:has(#submit_box:checked) .incorrect {
    display:block;
}

/*
 * rather than hiding the "incorrect" text if the user gets a question correct,
 * the correct text will simply overlap it, and due to having an opaque background,
 * will block the "incorrect" text from sight
 */
.correct {
    color:green;
    display:none;
    margin:0px;
    /* have "correct" text overlap "incorrect" if it's shown */
    z-index:1;
    position:absolute;
    /* these selectors cover up the right edge of the "incorrect" text */
    background-color:white;
    padding-right:100px;
}

/*
 * somewhat disable input once the quiz has been submitted
 * doesn't block keyboard shortcuts, but what else can I do...
 * this is probably the only thing I can do 
 */
:root:has(#submit_box:checked) * {
    pointer-events:none;
}

input#submit_box {
    display:none;
}

/*
 * used some css from here: https://stackoverflow.com/questions/23608346/how-to-style-a-div-like-the-button-element
 * I'm not a designer. I don't know how to actually style things nicely.
 * I just write logic... or in this case, many janky css selectors.
 */
#submit_text {
    display:inline-block;
    color:black;
    border:1px solid darkgray;
    background:darkgray;
    box-shadow: 0 0 5px -1px rgba(0,0,0,0.2);
    cursor:pointer;
    vertical-align:middle;
    padding: 5px;
    text-align: center;
}

div:has(>#submit_box:checked)>#submit_text {
    color:gray;
    background:lightgray;
    border:1px solid lightgray;
}

#reloadmsg {
    display:none;
    margin:0px;
}
div:has(>#submit_box:checked)>#reloadmsg {
    display:block;
}
div:has(>#submit_box) {
    margin-top:20px;
}

form:has( #submit_box:not(:checked))>.results {
    display:none;
}

.results {
    margin:0px;
}

/*
 * same technique as with correct/incorrect - all percentage values will be visible,
 * but ones higher in the z-order (declared later) will overlap lower ones,
 * covering them up
 */
.score {
    margin-left:4px;
    position:absolute;
    /* cover up lower percentages */
    background-color:white;
    padding-right:100px;
    display:none;
}

/*
 * I want to be able to scroll a bit past the end of the page, it's annoying when pages don't let you do that...
 */
#endofpage {
    margin-bottom:100px;
}


/*
 * =====================================\
 * =====| CORRECT/INCORRECT FLAGS  ======|
 * =====================================/
 */

/*
 * question 1
 * correct if user selects option 4
 */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked) #question1title .correct {
    display:block;
}
/*
 * not needed - correct element will simply cover up incorrect element
form:has(#submit_box:checked):has(>:nth-child(5) input:not(:checked)) #question1title .incorrect {
    display:block;
}
*/


/*
 * question 2
 * correct if user selects any option (all of them are correct based on how you define "first")
 * only checks option 1, but this can be applied to any child idx from 7-10 (options 1-4),
 *  since all options in a radio are "indeterminate" if nothing is selected
 */
form:has(#submit_box:checked):has(>:nth-child(7) input:not(:indeterminate)) #question2title .correct {
    display:block;
}
/*
 * not needed - correct element will simply cover up incorrect element 
form:has(#submit_box:checked):has(>:nth-child(7) input::indeterminate) #question2title .incorrect {
    display:block;
}
*/

/*
 * question 3
 * correct if user selects the wikipedia page, and either "yes" or "no" (or both)
 */
form:has(#submit_box:checked):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked) #question3title .correct {
    display:block;
}
/*
 * not needed - correct element will simply cover up incorrect element
form:has(#submit_box:checked):has(>:nth-child(14) input:not(:checked)) #question3title .incorrect,
form:has(#submit_box:checked):has(>:nth-child(12) input:not(:checked)):has(>:nth-child(13) input:not(:checked)) #question3title .incorrect {
    display:block;
}
*/

/*
 * question 4
 * correct if user selects either options 2 + 4, or options 1 + 3
 * since "3" + "9" will return "39", and 12 + 27 equals 39
 */
form:has(#submit_box:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #question4title .correct,
form:has(#submit_box:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #question4title .correct {
    display:block;
}

/* 
 * not needed - correct element will simply cover up incorrect element
form:has(#submit_box:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:not(:checked)) #question4title .incorrect,
form:has(#submit_box:checked):has(>:nth-child(18) input:checked):has(>:nth-child(16) input:not(:checked)) #question4title .incorrect,
form:has(#submit_box:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:not(:checked)) #question4title .incorrect,
form:has(#submit_box:checked):has(>:nth-child(19) input:checked):has(>:nth-child(17) input:not(:checked)) #question4title .incorrect,
form:has(#submit_box:checked):has(>:nth-child(16) input:checked):has(>:nth-child(17) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(19) input:checked) #question4title .incorrect,
form:has(#submit_box:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(18) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #question4title .incorrect {
    display:block;
}
*/

/*
 * ========================================\
 * =======| RESULTS PERCENT DISPLAY  =======|
 * ========================================/
 */

/*
 * if at least 0 correct options are selected, display 0% score
 * (so this is always on by default)
 */
#score0 {
    display:inline;
}

/*
 * if at least 1 correct option is selected, display 25% score
 */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked) #score25, /* question 1 correct */
form:has(#submit_box:checked):has(>:nth-child(7) input:not(:indeterminate)) #score25, /* question 2 correct */
form:has(#submit_box:checked):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked) #score25, /* question 3 correct */
form:has(#submit_box:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score25, /* method 1 of getting question 4 correct */
form:has(#submit_box:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score25 /* method 2 of getting question 4 correct */
{
    display:inline;
}

/*
 * if at least 2 correct options are selected, display 50% score
 */
/* question 1 and on */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(7) input:not(:indeterminate)) #score50, /* questions 1 and 2 correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked) #score50, /* questions 1 and 3 correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score50, /* questions 1 and 4 method 1 correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score50, /* questions 1 and 4 method 2 correct */
/* question 2 and on */
form:has(#submit_box:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked) #score50, /* questions 2 and 3 correct */
form:has(#submit_box:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score50, /* questions 2 and 4 method 1 correct */
form:has(#submit_box:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score50, /* questions 2 and 4 method 2 correct */
/* question 3 and on */
form:has(#submit_box:checked):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score50, /* questions 3 and 4 method 1 correct */
form:has(#submit_box:checked):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score50  /* questions 3 and 4 method 2 correct */
{
    display:inline;
}

/*
 * if at least 3 correct options are selected, display 75% score
 */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked) #score75, /* questions 1, 2 and 3 correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score75, /* questions 1, 2 and 4 method 1 correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score75, /* questions 1, 2 and 4 method 2 correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score75, /* questions 1, 3 and 4 method 1 correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score75, /* questions 1, 3 and 4 method 2 correct */
form:has(#submit_box:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score75, /* questions 2, 3 and 4 method 1 correct */
form:has(#submit_box:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score75  /* questions 2, 3 and 4 method 2 correct */
{
    display: inline;
}

/*
 * if all 4 correct options are selected, display 100% score
 */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(16) input:checked):has(>:nth-child(18) input:checked):has(>:nth-child(17) input:not(:checked)):has(>:nth-child(19) input:not(:checked)) #score100, /* questions 1, 2, 3 and 4 method 1 are correct */
form:has(#submit_box:checked):has(>:nth-child(5) input:checked):has(>:nth-child(7) input:not(:indeterminate)):has(>:nth-child(12) input:checked,>:nth-child(13) input:checked):has(>:nth-child(14) input:checked):has(>:nth-child(17) input:checked):has(>:nth-child(19) input:checked):has(>:nth-child(16) input:not(:checked)):has(>:nth-child(18) input:not(:checked)) #score100  /* questions 1, 2, 3 and 4 method 2 are correct */
{
    display: inline;
}

